buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

group = 'mu.lab'
version = '1.0.0'

checkstyle {
    toolVersion '6.7'
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.1.1'
}

task checkstyleMain(type: Checkstyle) {
    configFile file('./config/google_checks.xml')
    source 'src'
    include '**/*.java'

    classpath=files()
}

task checkstyleHtml << {
    if(file("$buildDir/reports/checkstyle/main.xml").exists()) {
        ant.xslt(in: "$buildDir/reports/checkstyle/main.xml",
                style: "./config/checkstyle-noframes-severity-sorted.xsl",
                out: "$buildDir/reports/checkstyle/main.html")
    }
}

checkstyleMain.finalizedBy checkstyleHtml

task findbugsMain(type: FindBugs) {
    classes = fileTree("$buildDir/intermediates/classes/debug")
    source = fileTree("src")
    classpath = files()
    effort = "max"
    reports {
        xml.enabled = false
        html.enabled = true
    }
    ignoreFailures = false
    excludeFilter = file("${project.projectDir}/config/findbugs-excludeFilter.xml")
}

findbugsMain.dependsOn "compileDebugSources"

task pmdMain(type: Pmd) {
    source fileTree('src')

    ruleSets = [
            'java-android',
            'java-basic',
            'java-braces',
            'java-clone',
            'java-codesize',
//            'java-comments',
//            'java-coupling',
            'java-design',
            'java-empty',
            'java-finalizers',
            'java-imports',
            'java-j2ee',
            'java-javabeans',
            'java-junit',
            'java-logging-jakarta-commons',
            'java-logging-java',
            'java-migrating',
//            'java-naming',
//            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-sunsecure',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
    ]

    reports {
        xml.enabled = false
        html.enabled = true
    }

    ignoreFailures = true
}

def gitUrl = 'https://github.com/mulab/android-log.git'
def siteUrl = 'https://github.com/mulab/android-log'

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    configurations = ['archives']
    pkg {
        repo = 'mulab'
        name = 'android-log'
        userOrg = 'mulab'
        licenses = ['MIT']
        vcsUrl = gitUrl
        websiteUrl = siteUrl
        publish = true
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'arr'
                name 'Android Log Wrapper'
                url siteUrl
                licenses {
                    license {
                        name 'MIT'
                        url 'http://opensource.org/licenses/MIT'
                    }
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
